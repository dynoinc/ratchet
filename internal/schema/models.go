// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package schema

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ActivityTypeEnum string

const (
	ActivityTypeEnumAlert ActivityTypeEnum = "alert"
	ActivityTypeEnumHuman ActivityTypeEnum = "human"
	ActivityTypeEnumBot   ActivityTypeEnum = "bot"
)

func (e *ActivityTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ActivityTypeEnum(s)
	case string:
		*e = ActivityTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ActivityTypeEnum: %T", src)
	}
	return nil
}

type NullActivityTypeEnum struct {
	ActivityTypeEnum ActivityTypeEnum
	Valid            bool // Valid is true if ActivityTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullActivityTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ActivityTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ActivityTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullActivityTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ActivityTypeEnum), nil
}

type RootCauseCategoryEnum string

const (
	RootCauseCategoryEnumBug               RootCauseCategoryEnum = "bug"
	RootCauseCategoryEnumDependencyfailure RootCauseCategoryEnum = "dependency failure"
	RootCauseCategoryEnumMisconfigured     RootCauseCategoryEnum = "misconfigured"
	RootCauseCategoryEnumOther             RootCauseCategoryEnum = "other"
)

func (e *RootCauseCategoryEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RootCauseCategoryEnum(s)
	case string:
		*e = RootCauseCategoryEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RootCauseCategoryEnum: %T", src)
	}
	return nil
}

type NullRootCauseCategoryEnum struct {
	RootCauseCategoryEnum RootCauseCategoryEnum
	Valid                 bool // Valid is true if RootCauseCategoryEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRootCauseCategoryEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RootCauseCategoryEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RootCauseCategoryEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRootCauseCategoryEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RootCauseCategoryEnum), nil
}

type SeverityEnum string

const (
	SeverityEnumLow  SeverityEnum = "low"
	SeverityEnumHigh SeverityEnum = "high"
)

func (e *SeverityEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SeverityEnum(s)
	case string:
		*e = SeverityEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SeverityEnum: %T", src)
	}
	return nil
}

type NullSeverityEnum struct {
	SeverityEnum SeverityEnum
	Valid        bool // Valid is true if SeverityEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSeverityEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SeverityEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SeverityEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSeverityEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SeverityEnum), nil
}

type UserTypeEnum string

const (
	UserTypeEnumHuman UserTypeEnum = "human"
	UserTypeEnumBot   UserTypeEnum = "bot"
)

func (e *UserTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserTypeEnum(s)
	case string:
		*e = UserTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UserTypeEnum: %T", src)
	}
	return nil
}

type NullUserTypeEnum struct {
	UserTypeEnum UserTypeEnum
	Valid        bool // Valid is true if UserTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UserTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserTypeEnum), nil
}

type Alert struct {
	ChannelID         string
	ActivitySlackTs   pgtype.Timestamptz
	TriggeredTs       pgtype.Timestamptz
	ResolvedTs        pgtype.Timestamptz
	AlertName         string
	Service           string
	Severity          SeverityEnum
	Actionable        bool
	RootCauseCategory NullRootCauseCategoryEnum
	RootCause         pgtype.Text
}

type AlertsRunbook struct {
	ChannelID string
	AlertName string
	Service   string
	CreatedTs pgtype.Timestamptz
	Runbook   string
	Active    bool
	Source    []byte
}

type SlackActivity struct {
	ChannelID       string
	ActivitySlackTs pgtype.Timestamptz
	ActivityType    ActivityTypeEnum
}

type SlackChannel struct {
	ChannelID string
	TeamName  string
	Enabled   bool
	CreatedAt pgtype.Timestamp
}

type SlackMessage struct {
	ChannelID        string
	ActivitySlackTs  pgtype.Timestamptz
	MessageChannelID string
	SlackTs          pgtype.Timestamptz
	UserID           pgtype.Text
	UserType         UserTypeEnum
	Text             pgtype.Text
	Reactions        []byte
}
