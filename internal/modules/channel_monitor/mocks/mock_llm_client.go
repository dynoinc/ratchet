// Code generated by MockGen. DO NOT EDIT.
// Source: ../../llm/client.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_llm_client.go -package=mocks -source=../../llm/client.go Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	llm "github.com/dynoinc/ratchet/internal/llm"
	jsonschema "github.com/qri-io/jsonschema"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ClassifyCommand mocks base method.
func (m *MockClient) ClassifyCommand(ctx context.Context, text string, sampleMessages map[string][]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassifyCommand", ctx, text, sampleMessages)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassifyCommand indicates an expected call of ClassifyCommand.
func (mr *MockClientMockRecorder) ClassifyCommand(ctx, text, sampleMessages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassifyCommand", reflect.TypeOf((*MockClient)(nil).ClassifyCommand), ctx, text, sampleMessages)
}

// Config mocks base method.
func (m *MockClient) Config() llm.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(llm.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockClientMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockClient)(nil).Config))
}

// GenerateChannelSuggestions mocks base method.
func (m *MockClient) GenerateChannelSuggestions(ctx context.Context, messages [][]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChannelSuggestions", ctx, messages)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChannelSuggestions indicates an expected call of GenerateChannelSuggestions.
func (mr *MockClientMockRecorder) GenerateChannelSuggestions(ctx, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChannelSuggestions", reflect.TypeOf((*MockClient)(nil).GenerateChannelSuggestions), ctx, messages)
}

// GenerateDocumentationResponse mocks base method.
func (m *MockClient) GenerateDocumentationResponse(ctx context.Context, question string, documents []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDocumentationResponse", ctx, question, documents)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDocumentationResponse indicates an expected call of GenerateDocumentationResponse.
func (mr *MockClientMockRecorder) GenerateDocumentationResponse(ctx, question, documents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDocumentationResponse", reflect.TypeOf((*MockClient)(nil).GenerateDocumentationResponse), ctx, question, documents)
}

// GenerateDocumentationUpdate mocks base method.
func (m *MockClient) GenerateDocumentationUpdate(ctx context.Context, doc, msgs string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDocumentationUpdate", ctx, doc, msgs)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDocumentationUpdate indicates an expected call of GenerateDocumentationUpdate.
func (mr *MockClientMockRecorder) GenerateDocumentationUpdate(ctx, doc, msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDocumentationUpdate", reflect.TypeOf((*MockClient)(nil).GenerateDocumentationUpdate), ctx, doc, msgs)
}

// GenerateEmbedding mocks base method.
func (m *MockClient) GenerateEmbedding(ctx context.Context, task, text string) ([]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmbedding", ctx, task, text)
	ret0, _ := ret[0].([]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmbedding indicates an expected call of GenerateEmbedding.
func (mr *MockClientMockRecorder) GenerateEmbedding(ctx, task, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmbedding", reflect.TypeOf((*MockClient)(nil).GenerateEmbedding), ctx, task, text)
}

// GenerateRunbook mocks base method.
func (m *MockClient) GenerateRunbook(ctx context.Context, service, alert string, msgs []string) (*llm.RunbookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRunbook", ctx, service, alert, msgs)
	ret0, _ := ret[0].(*llm.RunbookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRunbook indicates an expected call of GenerateRunbook.
func (mr *MockClientMockRecorder) GenerateRunbook(ctx, service, alert, msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRunbook", reflect.TypeOf((*MockClient)(nil).GenerateRunbook), ctx, service, alert, msgs)
}

// ProccessDeploymentOps mocks base method.
func (m *MockClient) ProccessDeploymentOps(ctx context.Context, text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProccessDeploymentOps", ctx, text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProccessDeploymentOps indicates an expected call of ProccessDeploymentOps.
func (mr *MockClientMockRecorder) ProccessDeploymentOps(ctx, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessDeploymentOps", reflect.TypeOf((*MockClient)(nil).ProccessDeploymentOps), ctx, text)
}

// RunJSONModePrompt mocks base method.
func (m *MockClient) RunJSONModePrompt(ctx context.Context, prompt string, schema *jsonschema.Schema) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunJSONModePrompt", ctx, prompt, schema)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunJSONModePrompt indicates an expected call of RunJSONModePrompt.
func (mr *MockClientMockRecorder) RunJSONModePrompt(ctx, prompt, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunJSONModePrompt", reflect.TypeOf((*MockClient)(nil).RunJSONModePrompt), ctx, prompt, schema)
}
