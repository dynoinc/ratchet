// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package schema

import (
	"context"
)

const disableSlackChannel = `-- name: DisableSlackChannel :one
UPDATE slack_channels
SET enabled = FALSE
WHERE channel_id = $1
RETURNING channel_id, team_name, enabled
`

func (q *Queries) DisableSlackChannel(ctx context.Context, channelID string) (SlackChannel, error) {
	row := q.db.QueryRow(ctx, disableSlackChannel, channelID)
	var i SlackChannel
	err := row.Scan(&i.ChannelID, &i.TeamName, &i.Enabled)
	return i, err
}

const getSlackChannelByID = `-- name: GetSlackChannelByID :one
SELECT channel_id, team_name, enabled FROM slack_channels
WHERE channel_id = $1
`

func (q *Queries) GetSlackChannelByID(ctx context.Context, channelID string) (SlackChannel, error) {
	row := q.db.QueryRow(ctx, getSlackChannelByID, channelID)
	var i SlackChannel
	err := row.Scan(&i.ChannelID, &i.TeamName, &i.Enabled)
	return i, err
}

const getSlackChannelsByTeam = `-- name: GetSlackChannelsByTeam :many
SELECT channel_id, team_name, enabled FROM slack_channels
WHERE team_name = $1
`

func (q *Queries) GetSlackChannelsByTeam(ctx context.Context, teamName string) ([]SlackChannel, error) {
	rows, err := q.db.Query(ctx, getSlackChannelsByTeam, teamName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SlackChannel
	for rows.Next() {
		var i SlackChannel
		if err := rows.Scan(&i.ChannelID, &i.TeamName, &i.Enabled); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSlackChannel = `-- name: InsertSlackChannel :one
INSERT INTO slack_channels (
    channel_id,
    team_name,
    enabled
) VALUES (
    $1,
    $2,
    TRUE
)
RETURNING channel_id, team_name, enabled
`

type InsertSlackChannelParams struct {
	ChannelID string
	TeamName  string
}

func (q *Queries) InsertSlackChannel(ctx context.Context, arg InsertSlackChannelParams) (SlackChannel, error) {
	row := q.db.QueryRow(ctx, insertSlackChannel, arg.ChannelID, arg.TeamName)
	var i SlackChannel
	err := row.Scan(&i.ChannelID, &i.TeamName, &i.Enabled)
	return i, err
}

const updateSlackChannel = `-- name: UpdateSlackChannel :one
UPDATE slack_channels
SET team_name = $2,
    enabled = TRUE
WHERE channel_id = $1
RETURNING channel_id, team_name, enabled
`

type UpdateSlackChannelParams struct {
	ChannelID string
	TeamName  string
}

func (q *Queries) UpdateSlackChannel(ctx context.Context, arg UpdateSlackChannelParams) (SlackChannel, error) {
	row := q.db.QueryRow(ctx, updateSlackChannel, arg.ChannelID, arg.TeamName)
	var i SlackChannel
	err := row.Scan(&i.ChannelID, &i.TeamName, &i.Enabled)
	return i, err
}
