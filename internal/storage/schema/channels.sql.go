// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: channels.sql

package schema

import (
	"context"

	dto "github.com/dynoinc/ratchet/internal/storage/schema/dto"
)

const addChannel = `-- name: AddChannel :one
INSERT INTO
    channels_v2 (id)
VALUES
    ($1) ON CONFLICT (id) DO
UPDATE
SET
    id = EXCLUDED.id RETURNING id,
    attrs
`

func (q *Queries) AddChannel(ctx context.Context, id string) (ChannelsV2, error) {
	row := q.db.QueryRow(ctx, addChannel, id)
	var i ChannelsV2
	err := row.Scan(&i.ID, &i.Attrs)
	return i, err
}

const getAllChannels = `-- name: GetAllChannels :many
SELECT
    id,
    attrs
FROM
    channels_v2
`

func (q *Queries) GetAllChannels(ctx context.Context) ([]ChannelsV2, error) {
	rows, err := q.db.Query(ctx, getAllChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelsV2
	for rows.Next() {
		var i ChannelsV2
		if err := rows.Scan(&i.ID, &i.Attrs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelByName = `-- name: GetChannelByName :one
SELECT
    id,
    attrs
FROM
    channels_v2
WHERE
    attrs ->> 'name' = $1 :: text
`

func (q *Queries) GetChannelByName(ctx context.Context, name string) (ChannelsV2, error) {
	row := q.db.QueryRow(ctx, getChannelByName, name)
	var i ChannelsV2
	err := row.Scan(&i.ID, &i.Attrs)
	return i, err
}

const getChannels = `-- name: GetChannels :many
SELECT
    id,
    attrs
FROM
    channels_v2
WHERE
    id = ANY($1::text[])
`

func (q *Queries) GetChannels(ctx context.Context, ids []string) ([]ChannelsV2, error) {
	rows, err := q.db.Query(ctx, getChannels, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelsV2
	for rows.Next() {
		var i ChannelsV2
		if err := rows.Scan(&i.ID, &i.Attrs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannelAttrs = `-- name: UpdateChannelAttrs :exec
UPDATE
    channels_v2
SET
    attrs = COALESCE(attrs, '{}' :: jsonb) || $1
WHERE
    id = $2
`

type UpdateChannelAttrsParams struct {
	Attrs dto.ChannelAttrs
	ID    string
}

func (q *Queries) UpdateChannelAttrs(ctx context.Context, arg UpdateChannelAttrsParams) error {
	_, err := q.db.Exec(ctx, updateChannelAttrs, arg.Attrs, arg.ID)
	return err
}
