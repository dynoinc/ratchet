// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_client.go -package=mocks -source=client.go Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	openai "github.com/openai/openai-go"
	jsonschema "github.com/qri-io/jsonschema"
	gomock "go.uber.org/mock/gomock"

	llm "github.com/dynoinc/ratchet/internal/llm"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockClient) Client() openai.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(openai.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClient)(nil).Client))
}

// GenerateEmbedding mocks base method.
func (m *MockClient) GenerateEmbedding(ctx context.Context, task, text string) ([]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmbedding", ctx, task, text)
	ret0, _ := ret[0].([]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmbedding indicates an expected call of GenerateEmbedding.
func (mr *MockClientMockRecorder) GenerateEmbedding(ctx, task, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmbedding", reflect.TypeOf((*MockClient)(nil).GenerateEmbedding), ctx, task, text)
}

// GenerateRunbook mocks base method.
func (m *MockClient) GenerateRunbook(ctx context.Context, service, alert string, msgs []string) (*llm.RunbookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRunbook", ctx, service, alert, msgs)
	ret0, _ := ret[0].(*llm.RunbookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRunbook indicates an expected call of GenerateRunbook.
func (mr *MockClientMockRecorder) GenerateRunbook(ctx, service, alert, msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRunbook", reflect.TypeOf((*MockClient)(nil).GenerateRunbook), ctx, service, alert, msgs)
}

// Model mocks base method.
func (m *MockClient) Model() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(string)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockClientMockRecorder) Model() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockClient)(nil).Model))
}

// RunChatCompletionWithTools mocks base method.
func (m *MockClient) RunChatCompletionWithTools(ctx context.Context, messages []openai.ChatCompletionMessageParamUnion, tools []openai.ChatCompletionToolParam, parallelToolCalls bool) (*openai.ChatCompletion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunChatCompletionWithTools", ctx, messages, tools, parallelToolCalls)
	ret0, _ := ret[0].(*openai.ChatCompletion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunChatCompletionWithTools indicates an expected call of RunChatCompletionWithTools.
func (mr *MockClientMockRecorder) RunChatCompletionWithTools(ctx, messages, tools, parallelToolCalls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunChatCompletionWithTools", reflect.TypeOf((*MockClient)(nil).RunChatCompletionWithTools), ctx, messages, tools, parallelToolCalls)
}

// RunJSONModePrompt mocks base method.
func (m *MockClient) RunJSONModePrompt(ctx context.Context, prompt string, schema *jsonschema.Schema) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunJSONModePrompt", ctx, prompt, schema)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunJSONModePrompt indicates an expected call of RunJSONModePrompt.
func (mr *MockClientMockRecorder) RunJSONModePrompt(ctx, prompt, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunJSONModePrompt", reflect.TypeOf((*MockClient)(nil).RunJSONModePrompt), ctx, prompt, schema)
}
